"""
Outils utilitaires liÃ©s Ã  la gestion du cache.
Permet la suppression sÃ©curisÃ©e de clÃ©s ou de motifs
dans tous les backends compatibles (FileBased, LocMem, Redis...).
"""

from django.core.cache import cache


def safe_delete_pattern(pattern: str) -> None:
    """
    Supprime en toute sÃ©curitÃ© les entrÃ©es du cache correspondant Ã  un motif.

    - Compatible avec tous les backends (FileBased, LocMem, Redisâ€¦)
    - Si le backend ne supporte pas `delete_pattern`, un fallback
      interne est utilisÃ© pour supprimer manuellement les clÃ©s.
    - Si aucune suppression ciblÃ©e nâ€™est possible, un clear global
      est effectuÃ© en dernier recours.

    Args:
        pattern (str): motif de clÃ© (ex: "user_projects_*")
    """
    deleted_any = False

    # ğŸ”¹ Cas 1 â€” Backend avec support natif de delete_pattern (ex: Redis)
    try:
        cache.delete_pattern(pattern)
        deleted_any = True
    except AttributeError:
        # ğŸ”¹ Cas 2 â€” Backend sans delete_pattern (ex: FileBased / LocMem)
        base = pattern.replace("*", "")
        try:
            local_cache = getattr(cache, "_cache", {})
            for key in list(local_cache.keys()):
                if base in str(key):
                    cache.delete(key)
                    deleted_any = True
        except Exception:
            # Ã‰vite toute erreur fatale si le backend ne supporte pas lâ€™accÃ¨s direct
            pass

    # ğŸ”¹ Cas 3 â€” Aucun Ã©lÃ©ment supprimÃ© : fallback global
    if not deleted_any:
        cache.clear()
